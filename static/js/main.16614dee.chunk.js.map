{"version":3,"sources":["components/SecretCode/index.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["SecretCode","useState","secretCode","setSecretCode","proposition","setProposition","className","onChange","event","target","value","toLowerCase","onClick","Home","history","useHistory","Fragment","push","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAGO,SAASA,IAAc,IAAD,EACWC,mBAAS,IADpB,mBAClBC,EADkB,KACNC,EADM,OAEaF,mBAAS,IAFtB,mBAElBG,EAFkB,KAELC,EAFK,KA8BzB,OACI,6BACI,+CACA,yBAAKC,UAAU,aACX,uBAAGA,UAAU,gBAAb,oEAIA,sCACY,0BAAMA,UAAU,gBAAhB,KADZ,mBAEM,0BAAMA,UAAU,gBAAhB,KAFN,OAGI,0BAAMA,UAAU,gBAAhB,KAHJ,yCAKI,0BAAMA,UAAU,gBAAhB,KALJ,QAMI,0BAAMA,UAAU,gBAAhB,KANJ,iBAOI,0BAAMA,UAAU,gBAAhB,KAPJ,OAQI,0BAAMA,UAAU,gBAAhB,KARJ,QASI,0BAAMA,UAAU,gBAAhB,KATJ,SAUI,0BAAMA,UAAU,gBAAhB,KAVJ,MAYA,2BACIC,SA/ChB,SAA0BC,GACtBL,EAAcK,EAAMC,OAAOC,MAAMC,gBA+CrBL,UAAU,cAEd,4BAAQM,QA/CpB,WAEQP,EADe,cAAfH,EACe,OACO,KAAfA,EACQ,QAEA,UAyCmBI,UAAU,oBAAxC,oBAGA,6BAvCY,SAAhBF,EAEI,6BACI,6BACA,4BAAQE,UAAU,QAAlB,cAGe,UAAhBF,EACA,uBAAGE,UAAU,eAAb,8BADJ,KCzBR,SAASO,IACZ,IAAMC,EAAUC,cAKhB,OACI,kBAAC,IAAMC,SAAP,KACI,oCACA,4BAAQJ,QAPhB,WACIE,EAAQG,KAAK,iBAMT,YCPG,SAASC,IACpB,OACI,kBAAC,IAAD,KACI,6BACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,eAAT,kBAOZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,eACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAACP,EAAD,UCfJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFW,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.16614dee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './index.css';\n\nexport function SecretCode() {\n    const [secretCode, setSecretCode] = useState('');\n    const [proposition, setProposition] = useState('');\n\n    function handleTermChange(event) {\n        setSecretCode(event.target.value.toLowerCase());\n    }\n    function handleClick() {\n        if (secretCode === 'tentation') {\n            setProposition('true');\n        } else if (secretCode === '') {\n            setProposition('empty');\n        } else {\n            setProposition('false');\n        }\n    }\n\n    function getResults() {\n        if (proposition === 'true') {\n            return (\n                <div>\n                    <br />\n                    <button className=\"next\"> >> Next </button>\n                </div>\n            );\n        } else if (proposition === 'false') {\n            return <p className=\"wrongAnswer\"> ...Essaye encore... </p>;\n        } else {\n        }\n    }\n    return (\n        <div>\n            <h1>LE CODE SECRET </h1>\n            <div className=\"gameBlock\">\n                <p className=\"explanations\">\n                    Trouve le code secret pour passer à la prochaine énigme...\n                </p>\n\n                <p>\n                    4U D3P4r<span className=\"secretLetter\">7</span> C357 8451QU3\n                    r1<span className=\"secretLetter\">3</span>N D3\n                    <span className=\"secretLetter\">N</span>0UV34U N1 D3 C0MP11QU\n                    3 M415 r4P1D3M3N\n                    <span className=\"secretLetter\">7</span> C4 V\n                    <span className=\"secretLetter\">4</span> 53 6473r 50 1\n                    <span className=\"secretLetter\">7</span> P47\n                    <span className=\"secretLetter\">1</span>3N7 P\n                    <span className=\"secretLetter\">0</span>Ur 646\n                    <span className=\"secretLetter\">N</span>3r\n                </p>\n                <input\n                    onChange={handleTermChange}\n                    className=\"userInput\"\n                ></input>\n                <button onClick={handleClick} className=\"validationButton\">\n                    Tenter ma chance\n                </button>\n                <div>{getResults()}</div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport function Home() {\n    const history = useHistory();\n    function handleClick() {\n        history.push('/secretcode');\n    }\n\n    return (\n        <React.Fragment>\n            <h2>Home</h2>\n            <button onClick={handleClick}> Start </button>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { SecretCode } from './components/SecretCode';\nimport { Home } from './components/Home';\n\nexport default function App() {\n    return (\n        <Router>\n            <div>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/secretcode\">Secret Code</Link>\n                        </li>\n                    </ul>\n                </nav>\n\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/secretcode\">\n                        <SecretCode />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}